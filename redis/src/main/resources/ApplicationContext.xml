<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath:config.properties"/>
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxWaitMillis" value="${jdbc.maxwait}"/>
        <property name="initialSize" value="${jdbc.initsize}"/>
        <property name="maxTotal" value="${jdbc.maxsize}"/>
        <property name="maxIdle" value="${jdbc.maxidle}"/>
        <property name="minIdle" value="${jdbc.minidle}"/>
    </bean>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--jdbc 事务管理器-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 基于注解的事务  @Transactional-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 配置mybatis的SqlSessionFactoryBean-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--将pojo包中的所有类起别名为类的名字-->
        <property name="typeAliasesPackage" value="com.it.pojo"/>
        <!-- 自动加载classpath中的所有xml-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>
    <!--自动扫描Mapper MyBatis : 1.Mapper 接口的位置 2.将所有Mapper的实现类放入spring容器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.it.mapper"/>
    </bean>

    <!-- p / context/ tx/aop-->
    <!--开启基于注解的Bean管理和DI 7.1-->
    <context:component-scan base-package="com.it">
        <!--排除扫描@Controller注解-->
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!--开启基于注解的AOP-->
    <aop:aspectj-autoproxy/>


    <!--spring-data-redis-->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="192.168.1.34"/>
        <property name="port" value="6379"/>
        <property name="usePool" value="true"/>
    </bean>

    <bean id="stringRedisSerializer"
          class="org.springframework.data.redis.serializer.StringRedisSerializer"/>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="keySerializer" ref="stringRedisSerializer"/>
        <property name="valueSerializer" ref="stringRedisSerializer"/>
    </bean>

    <!--<aop:config>-->
    <!--&lt;!&ndash;引用通知类对象&ndash;&gt;-->
    <!--<aop:aspect ref="mayAdvice">-->
    <!--&lt;!&ndash; 定义切入点表达式&ndash;&gt;-->
    <!--<aop:pointcut id="myPointCut" expression="execution(* com.it.mapper..*.*(..))"/>-->
    <!--&lt;!&ndash; 环绕通知&ndash;&gt;-->
    <!--<aop:around method="aroundAdvice" pointcut-ref="myPointCut"/>-->
    <!--&lt;!&ndash;加入各种通知，前置，后置，最终，异常&ndash;&gt;-->
    <!--&lt;!&ndash;<aop:before method="beforeInf" pointcut-ref="myPointCut"/>&ndash;&gt;-->
    <!--&lt;!&ndash;<aop:after-returning method="afterReturningInf" pointcut-ref="myPointCut" returning="result"/>&ndash;&gt;-->
    <!--&lt;!&ndash;<aop:after-throwing method="exceptionInf" pointcut-ref="myPointCut" throwing="e"/>&ndash;&gt;-->
    <!--&lt;!&ndash;<aop:after method="finallyInf" pointcut-ref="myPointCut"/>&ndash;&gt;-->
    <!--</aop:aspect>-->
    <!--</aop:config>-->


</beans>